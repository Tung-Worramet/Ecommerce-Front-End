import React, { useState, useEffect } from "react";
import useEcomStore from "../../store/ecom-store";
import Slider from "rc-slider";
import "rc-slider/assets/index.css";
import { numberFormat } from "../../utils/number";
import { Search, Filter } from "lucide-react";

const SearchCard = () => {
  const getProduct = useEcomStore((state) => state.getProduct);
  const products = useEcomStore((state) => state.products);
  const actionSearchFilters = useEcomStore(
    (state) => state.actionSearchFilters
  );
  const getCategory = useEcomStore((state) => state.getCategory);
  const categories = useEcomStore((state) => state.categories);

  const [text, setText] = useState("");
  const [categorySelected, setCategorySelected] = useState([]);
  const [price, setPrice] = useState([0, 100000]);
  const [ok, setOk] = useState(false);

  const [filteredProducts, setFilteredProducts] = useState([]);

  // console.log(categories);
  useEffect(() => {
    getCategory();
  }, []);

  // Step 1 Search Text
  // console.log(text);
  useEffect(() => {
    const delay = setTimeout(() => {
      if (text) {
        actionSearchFilters({ query: text });
      } else {
        getProduct();
      }
    }, 500);

    return () => clearTimeout(delay); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount ‡πÉ‡∏´‡πâ clear timeout
  }, [text]); // ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà text ‡∏•‡∏á‡πÉ‡∏ô [] ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ useEffect ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á text ‡πÄ‡∏°‡∏∑‡πà‡∏≠ text ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á useEffect ‡∏Å‡πá‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Ñ‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô useEffect ‡∏î‡πâ‡∏ß‡∏¢

  // Step 2 Search by Category
  const handleCheck = (e) => {
    // console.log(e.target.value);
    const inCheck = e.target.value; // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ ‡∏ï‡∏¥‡πä‡∏Å ‡πÑ‡∏ß‡πâ
    const inState = [...categorySelected]; // [] ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ ‡∏ï‡∏¥‡πä‡∏Å
    const findCheck = inState.indexOf(inCheck); // ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô array ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏à‡∏∞ return -1

    if (findCheck === -1) {
      inState.push(inCheck); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô array ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    } else {
      inState.splice(findCheck, 1); // ‡∏•‡∏ö‡πÉ‡∏ô array ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    }
    setCategorySelected(inState);

    if (inState.length > 0) {
      actionSearchFilters({ category: inState });
    } else {
      getProduct();
    }
  };
  // console.log(categorySelected);

  // Step 3 Search by Price
  useEffect(() => {
    actionSearchFilters({ price });
  }, [ok]);

  const handlePrice = (value) => {
    // console.log(value);
    setPrice(value); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    setTimeout(() => {
      setOk(!ok);
    }, 300);
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-lg space-y-6">
      {/* Header */}
      {/* <div className="flex items-center gap-2">
        <Filter size={24} className="text-blue-600" />
        <h2 className="text-2xl font-bold">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
      </div> */}

      {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
      <div className="relative">
        <Search className="absolute left-3 top-2 text-gray-400" />
        <input
          className="border rounded-md w-full py-2 pl-10 pr-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
          value={text}
          onChange={(e) => setText(e.target.value)}
        />
      </div>

      {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
      <div>
        <h3 className="text-lg font-semibold mb-2">üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
        <div className="space-y-2">
          {categories.map((item, index) => (
            <label
              key={index}
              className="flex items-center gap-2 cursor-pointer"
            >
              <input
                type="checkbox"
                className="w-4 h-4"
                onChange={handleCheck}
                value={item.id}
              />
              <span className="text-gray-700">{item.name}</span>
            </label>
          ))}
        </div>
      </div>

      {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤ */}
      <div>
        <h3 className="text-lg font-semibold mb-2">üí∞ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤</h3>
        <div className="flex justify-between text-gray-700">
          <span>Min: {numberFormat(price[0])}</span>
          <span>Max: {numberFormat(price[1])}</span>
        </div>
        <Slider
          onChange={handlePrice}
          range
          min={0}
          max={100000}
          defaultValue={[100, 100000]}
        />
      </div>
    </div>

    // ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤
    // <div>
    //   <h1 className="text-xl font-bold md-4">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>
    //   {/* ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô  Search by Text*/}
    //   <input
    //     className="border rounded-md w-full mb-4 px-2"
    //     type="text"
    //     placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
    //     value={text}
    //     onChange={(e) => setText(e.target.id)}
    //   />
    //   <hr />

    //   {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Search by category*/}
    //   <div>
    //     <h1 className="text-xl">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>
    //     <div>
    //       {categories.map((item, index) => (
    //         <div className="flex gap-2" key={index}>
    //           <input type="checkbox" onChange={handleCheck} value={item.id} />
    //           <label>{item.name}</label>
    //         </div>
    //       ))}
    //     </div>
    //   </div>
    //   <hr />

    //   {/* Search by Price */}
    //   <div>
    //     <h1>‡∏Ñ‡πâ‡∏≤‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤</h1>
    //     <div>
    //       <div className="flex justify-between">
    //         <span>Min : {numberFormat(price[0])}</span>
    //         <span>Max : {numberFormat(price[1])}</span>
    //       </div>
    //       <Slider
    //         onChange={handlePrice}
    //         range
    //         min={0}
    //         max={100000}
    //         defaultValue={[100, 100000]}
    //       />
    //     </div>
    //   </div>
    // </div>
  );
};

export default SearchCard;
